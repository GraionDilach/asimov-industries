
 //----------------------------------------------------
 //---------------- S l a v e  v1.0 -----------------------
 //-----------------------------------------------------------

 #define BTCONN 0
 #define INBOX 5
 #define OUTBOX 2
 #define 	BTN4 3

 //----Program use these variables----
 bool A_Done=false;
 bool B_Done=false;
 bool C_Done=false;
 bool Ball_OK=false;
 int A_Memory=0;
 int B_Memory=0;
 int C_Memory=0;
 int RA=0;
 int RB=0;
 int RC=0;
 int realTurn=0;
 bool free=true;

 //----------------------- O p t i o n s --------
 int power=40;//%
 int ack=0xFF; //Message ACK
 int endProcess=0xFA; //Motor processing Done ACK
 int CheckTime=50; //Message checking intervallum
 int FlashTime=100; //Led flashing interval
 int Tolerance=10; //Tolerance for Motor position
 //--------------------------------------------------CheckLamp------------------
 task LedRed()
 {
 SetSensorColorBlue(IN_4);
 Wait(FlashTime);
 SetSensorColorNone(IN_4);
 Wait(50);
 SetSensorColorRed(IN_4);
 Wait(1000);
 SetSensorColorNone(IN_4);

 }
 task LedGreen()
 {
  SetSensorColorBlue(IN_4);
  Wait(FlashTime);
  SetSensorColorNone(IN_4);
  Wait(50);
  int i=0;
  while(free==true)
  {

    if(i==0){
    SetSensorColorGreen(IN_4);
    Wait(100);
    i=1;}
    else{
    SetSensorColorNone(IN_4);
    Wait(1000);
    i=0;}

}

 }
 task LedBlue()
 {
 SetSensorColorBlue(IN_4);
 Wait(FlashTime);
 SetSensorColorNone(IN_4);
 }
 //-------------------------------------Check Bluetooth Connection--------------
 sub BTCheck(int conn)
 {
     while(!BluetoothStatus(conn)==NO_ERR){
     TextOut(0,LCD_LINE1,"No Conneciton!");
     Wait(2000);

     }
     ClearScreen();
 }
 //---------------------------------------------Motor A&B Syncron---------------
 task MotorAB()
 {
     RotateMotorExPID(OUT_AB, power, RA, 0, true, true, 50, 50, 50);
     A_Done=true;
     B_Done=true;
 }
 //---------------------------------------Motor A&B Inverse Syncron-------------
 task MotorABInverse()
 {
 if(RA>0&&RB<0){
  RotateMotorExPID(OUT_AB,power, RA, -100, true, true, 90, 40, 50);
 }
 else{
  RotateMotorExPID(OUT_AB,power, RA, 100, true, true, 90, 40, 50);
 }

  A_Done=true;
  B_Done=true;
 }
//-----------------------------------------------------Motor A------------------
 task MotorA()
 {
     RotateMotorPID(OUT_A, power, RA, 40, 40, 40);
     A_Done=true;
 }

 //----------------------------------------------------Motor B------------------
 task MotorB()
 {
     RotateMotorPID(OUT_B, power, RB, 40, 40, 40);
     B_Done=true;
 }
 //-----Motor C (Magnet)------------------
 task MotorC()
 {
     SetSensor(IN_1, SENSOR_TOUCH);

     if(!Ball_OK){RotateMotor(OUT_C, power, RC);Off(OUT_C);}
     if(SENSOR_1==1){Ball_OK=true;}

     C_Done=true;
 }
 //-------------------------------------------------------------Real Position---
 int MotorRealPosition(string Port)
 {
     int AP=MotorRotationCount(OUT_A);
     int BP=MotorRotationCount(OUT_B);
     ClearLine(LCD_LINE6);
     ClearLine(LCD_LINE7);

     TextOut(10,LCD_LINE6,NumToStr(AP));
     TextOut(60,LCD_LINE6,NumToStr(BP));

     TextOut(10,LCD_LINE7,NumToStr(A_Memory-AP));
     TextOut(60,LCD_LINE7,NumToStr(B_Memory-BP));
   if(Port=="A")
   {
      TextOut(30,LCD_LINE5,"A");
      return AP;
   }
   else
   {
       TextOut(70,LCD_LINE5,"B");

       return BP;
   }
}
 //-----------------Driving Task-----------------------------------------------
 task Drive()
 {
      string in;
      int A=0;
      int B=0;
      int C=0;
      TextOut(0,LCD_LINE2,"Break ON!");
      TextOut(0,LCD_LINE3,"Waiting...");
      Off(OUT_AB);
      Wait(20);
      //Recieve Commands From PC in endless cycle
      start LedGreen;
      while(true){
      A=0;
      B=0;
      C=0;

      //Message put to "in" variable
      if (ReceiveRemoteString(INBOX, true, in)!=STAT_MSG_EMPTY_MAILBOX){
      //if get RemoteMessage that do command
      free=false;
      SendResponseNumber(OUTBOX, ack); //send ACK
      start LedRed;

      ClearScreen();
      TextOut(0,LCD_LINE1,"Get command:");


      //Separate arguments
      RA=StrToNum(SubStr(in, 0, 5));
      RB=StrToNum(SubStr(in, 6, 10));
      RC=StrToNum(SubStr(in, 12, 16));

      TextOut(0,LCD_LINE2,"A:"+NumToStr(RA));
      TextOut(0,LCD_LINE3,"B:"+NumToStr(RB));
      in="";

      //Set Theoretical Position
      A_Memory=A_Memory+RA;
      B_Memory=B_Memory+RB;
      C_Memory=C_Memory+RC;

      //---------------------Drive Motor
      if (RA!=0||RB!=0)
      {
                 if(RA==RB)
                 {
                     TextOut(0,LCD_LINE4,"Run A&B Syncron!");
                     start MotorAB;
                 }
                 else{
                     if(abs(RA)==abs(RB)){
                     start MotorABInverse;
                     }
                     else{
                     start MotorA;
                     start MotorB;
                     }
                 }
      }//if (A and B)
       //Ide kerül majd a C Port vezérlése

      //--------------------Drive Motor


      //Waiting for process's end
      until(A_Done==true&&B_Done==true);
      A_Done=false;
      B_Done=false;


      //------------Check motor process
      realTurn=MotorRealPosition("A");
      while((A_Memory-realTurn<-1*Tolerance)||(A_Memory-realTurn>Tolerance)){
      RotateMotorPID(OUT_A, 20, A_Memory-realTurn, 90, 40, 50);
      realTurn=MotorRealPosition("A");
      }
      realTurn=MotorRealPosition("B");
      while((B_Memory-realTurn<-1*Tolerance)||(B_Memory-realTurn>Tolerance)){
      RotateMotorPID(OUT_B, 15, B_Memory-realTurn, 90, 40, 50);
      realTurn=MotorRealPosition("B");
      }
      //------------Check motor process

      SendResponseNumber(OUTBOX, endProcess);
      free=true;
      start LedGreen;
      TextOut(0,LCD_LINE3,"Waiting...");
      Off(OUT_AB);
      TextOut(0,LCD_LINE8,"Done! Break ON!");


      }//if
      else{}
      ResetSleepTimer();
       Wait(CheckTime);
      }//while
 }
 //--------------------------Main-----------------------------------------------
 task main(){
      BTCheck(BTCONN);//Check Master Connection
      TextOut(0,LCD_LINE1,"Connection OK");
      TextOut(0,LCD_LINE2,"Press Enter to Start");

      //Waiting for Press Enter
      until(ButtonPressed(BTN4,true)==1);
      start Drive;

      //Waiting for Press Exit
      SetSensor(IN_1, SENSOR_TOUCH);
      until(SENSOR_1==1);
      OffEx(OUT_AB,true);
      PowerDown();

 }//main


 //------------------NXT PC Remoting-----------------------
 //-----------------------------------by Székely Flórián---

